// Code generated by MockGen. DO NOT EDIT.
// Source: internal/registration/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "xamss.onelab.final/internal/registration/domain"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockService) CreateAccount(ctx context.Context, u *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockServiceMockRecorder) CreateAccount(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockService)(nil).CreateAccount), ctx, u)
}

// CreateAppointment mocks base method.
func (m *MockService) CreateAppointment(ctx context.Context, a *domain.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointment", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppointment indicates an expected call of CreateAppointment.
func (mr *MockServiceMockRecorder) CreateAppointment(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointment", reflect.TypeOf((*MockService)(nil).CreateAppointment), ctx, a)
}

// GetAppointment mocks base method.
func (m *MockService) GetAppointment(ctx context.Context, id int64) (*domain.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointment", ctx, id)
	ret0, _ := ret[0].(*domain.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointment indicates an expected call of GetAppointment.
func (mr *MockServiceMockRecorder) GetAppointment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointment", reflect.TypeOf((*MockService)(nil).GetAppointment), ctx, id)
}

// GetAppointmentsByAccountID mocks base method.
func (m *MockService) GetAppointmentsByAccountID(ctx context.Context, id int64) ([]domain.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentsByAccountID", ctx, id)
	ret0, _ := ret[0].([]domain.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentsByAccountID indicates an expected call of GetAppointmentsByAccountID.
func (mr *MockServiceMockRecorder) GetAppointmentsByAccountID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsByAccountID", reflect.TypeOf((*MockService)(nil).GetAppointmentsByAccountID), ctx, id)
}

// GetDoctorsBySpeciality mocks base method.
func (m *MockService) GetDoctorsBySpeciality(ctx context.Context, speciality string) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorsBySpeciality", ctx, speciality)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorsBySpeciality indicates an expected call of GetDoctorsBySpeciality.
func (mr *MockServiceMockRecorder) GetDoctorsBySpeciality(ctx, speciality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorsBySpeciality", reflect.TypeOf((*MockService)(nil).GetDoctorsBySpeciality), ctx, speciality)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, username, password)
}

// VerifyToken mocks base method.
func (m *MockService) VerifyToken(token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockServiceMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockService)(nil).VerifyToken), token)
}
