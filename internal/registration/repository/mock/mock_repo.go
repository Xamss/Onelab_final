// Code generated by MockGen. DO NOT EDIT.
// Source: internal/registration/repository/repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "xamss.onelab.final/internal/registration/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockRepository) CreateAccount(ctx context.Context, u *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRepositoryMockRecorder) CreateAccount(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRepository)(nil).CreateAccount), ctx, u)
}

// CreateAppointment mocks base method.
func (m *MockRepository) CreateAppointment(ctx context.Context, a *domain.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointment", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppointment indicates an expected call of CreateAppointment.
func (mr *MockRepositoryMockRecorder) CreateAppointment(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointment", reflect.TypeOf((*MockRepository)(nil).CreateAppointment), ctx, a)
}

// GetAccount mocks base method.
func (m *MockRepository) GetAccount(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockRepositoryMockRecorder) GetAccount(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockRepository)(nil).GetAccount), ctx, username)
}

// GetAppointment mocks base method.
func (m *MockRepository) GetAppointment(ctx context.Context, id int64) (*domain.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointment", ctx, id)
	ret0, _ := ret[0].(*domain.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointment indicates an expected call of GetAppointment.
func (mr *MockRepositoryMockRecorder) GetAppointment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointment", reflect.TypeOf((*MockRepository)(nil).GetAppointment), ctx, id)
}

// GetAppointmentsByAccountID mocks base method.
func (m *MockRepository) GetAppointmentsByAccountID(ctx context.Context, id int64) ([]domain.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentsByAccountID", ctx, id)
	ret0, _ := ret[0].([]domain.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentsByAccountID indicates an expected call of GetAppointmentsByAccountID.
func (mr *MockRepositoryMockRecorder) GetAppointmentsByAccountID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsByAccountID", reflect.TypeOf((*MockRepository)(nil).GetAppointmentsByAccountID), ctx, id)
}

// GetDoctorsBySpeciality mocks base method.
func (m *MockRepository) GetDoctorsBySpeciality(ctx context.Context, speciality string) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorsBySpeciality", ctx, speciality)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorsBySpeciality indicates an expected call of GetDoctorsBySpeciality.
func (mr *MockRepositoryMockRecorder) GetDoctorsBySpeciality(ctx, speciality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorsBySpeciality", reflect.TypeOf((*MockRepository)(nil).GetDoctorsBySpeciality), ctx, speciality)
}
